#The first task 

#include <iostream>
#include <vector>
using namespace std;

int Search_Binary(int arr[], int left, int right, int key)
{
	int midd = 0;
	while (1)
	{
		midd = (left + right) / 2;

		if (key < arr[midd])       
			right = midd - 1;      
		else if (key > arr[midd]) 
			left = midd + 1;	  
		else                       
			return midd;           

		if (left > right)          
			return -1;
	}
}

int main()
{
	setlocale(LC_ALL, "rus");

	const int SIZE = 12;
	int array[SIZE] = {};
	int key = 0;
	int index = 0;

	for (int i = 0; i < SIZE; i++) 
	{
		array[i] = i + 1;
		cout << array[i] << " | ";
	}

	cout << "\n\nВведите любое число: ";
	cin >> key;

	index = Search_Binary(array, 0, SIZE, key);

	if (index >= 0)
		cout << "Указанное число находится в ячейке с индексом: " << index << "\n\n";
	else
		cout << "Нет такого числа!!!\n\n";

	return 0;
}

________________________________________________________________________________

#The second task

#include <iostream>
#include <string>
#include <vector>

using namespace std;
 
const int arr_size = 5;
 
void quicksort(int mas[], int size) {
	int i = 0;
	int j = size - 1;
 
	int mid = mas[size / 2];
 
	do {
		while (mas[i] < mid) {
			i++;
		}
		while (mas[j] > mid) {
			j--;
		}
 
		if (i <= j) {
			swap(mas[i], mas[j]);
			i++;
			j--;
		}
	} while (i <= j);
 
 
	if (j > 0) {
		quicksort(mas, j + 1);
	}
	if (i < size) {
		quicksort(&mas[i], size - i);
	}
}
 
int binarysearch(int mas[], int l, int r,int digit) {
	if (r >= l) {
		int mid = l + ((r - l) / 2);
		if (mas[mid] == digit) {
			return mid;
		}
 
		if (digit < mas[mid]) {
			return binarysearch(mas, l, mid - 1, digit);
		}
		return binarysearch(mas, mid+1, r, digit);
	}
	else {
		return -1;
	}
 
}
 
 
 
int main() {
 
	int arr[arr_size] = { 4,2,5,3,1 };
	int res[10][2];
	int k=5;
	int iter = 0;
	for (int i = 0; i < arr_size; i++) {
		for (int j = i; j < arr_size; j++) {
			if (arr[i] + arr[j] == k) {
				int res_iter[1][2] = { arr[i],arr[j] };
				memcpy(res[iter], res_iter, sizeof(res_iter));
				iter++;
			}
		}
	}
 
	for (int i = 0; i < iter; i++) {
		for (int j = 0; j < 2; j++) {
			cout << res[i][j] << ' ';
		}
		cout << endl;
	}
 
	return 0;
}